Các kiểu dữ liệu khác: cấu trúc, slice, và maps.
Học cách làm thế nào định nghĩa được một kiểu dữ liệu mới dựa trên kiểu dữ liệu đã có: trong bài học này bạn sẽ học về cấu trúc, mảng, slice và map.

The Go Authors
http://golang.org

* Con trỏ

Go có con trỏ (pointer). 
Một con trỏ lưu trữ địa chỉ của một biến.

Kiểu `*T` là một con trỏ trỏ đến một giá trị kiểu `T`. Giá trị zero của một con trỏ là `nil`.

	var p *int

Toán tử `&` dùng để lấy địa chỉ của một biến.

	i := 42
	p = &i

Toán tử `*` dùng để lấy giá trị của biến mà con trỏ đó trỏ đến.

	fmt.Println(*p) // đọc giá trị i qua con trỏ p
	*p = 21         // gán giá trị cho i thông qua con trỏ p

This is known as "dereferencing" or "indirecting".

Không như C, trong Go không có các phép toán số học trên con trỏ.

.play moretypes/pointers.go

* Cấu trúc 

Một cấu trúc `struct` là một tập hợp các trường (field). (Và sử dụng một khai báo `type`.)

.play moretypes/structs.go

* Các trường của cấu trúc

Các trường của một cấu trúc được truy cập bằng cách sử dụng dấu chấm.

.play moretypes/struct-fields.go

* Con trỏ đến một cấu trúc

Các trường của một cấu trúc có thể truy cập thông qua một con trỏ đến một cấu trúc. trúc

Việc truy cập gián tiếp thông qua con trỏ là hoàn toàn trong suốt.

.play moretypes/struct-pointers.go

* Khai báo một cấu trúc

Một cấu trúc được cấp phát mới bằng cách liệt kê các giá trị của các trường của nó.

Bạn có thể liệt kê chỉ một tập con các trường bằng cách sử dụng cú pháp "tên-trường: " (Thứ tự của các tên trường là không quan trọng.)

Tiền tố đặc biệt `&` trả về một con trỏ đến một cấu trúc.

.play moretypes/struct-literals.go

* Mảng 

Biểu thức `[n]T` chỉ một mảng `n` giá trị mang kiểu `T`.

Biểu thức

	var a [10]int

khai báo một biến `a` như là một mảng 10 số nguyên.

Chiều dài một mảng là một phần của kiểu của nó, vì vậy các mảng không thể thay đổi kích cỡ. 
Điều này có vẻ hạn chế, nhưng đừng lo lắng, Go sẽ cung cấp cho bạn một cách thuật tiện để làm việc với mảng.


.play moretypes/array.go

* Slice 

Một lát cắt (slice) được trỏ đến một mảng các giá trị, và mọi slice đều có một độ dài nào đó.

`[]T` là một slice với các phần tử có kiểu `T`.

.play moretypes/slices.go

* Slicing slices

Một slice có thể được cắt lại, tạo ra một slice mới trỏ đến cùng một mảng.

Biểu thức

	s[lo:hi]

trả về một slice các phần tử từ chỉ số `lo` đến `hi-1`, bao gồm giá trị ở cả hai đầu mút. Do đó

	s[lo:lo]

là rỗng và

	s[lo:lo+1]

có đúng một phần tử.

.play moretypes/slicing-slices.go

* Tạo một slice

Các slice được tạo ra với hàm `make`. Nó hoạt động bằng cách khởi tạo một mảng các giá trị zero và trả về một slice trỏ đến mảng đó:

	a := make([]int, 5)  // len(a)=5

Để xác định sức chứa (capacity) cho một slice, bạn truyền một tham số thứ ba cho hàm `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go

* Nil slice

Giá trị zero của một slice là `nil`.

Một slice nil có độ dài và sức chứa là 0.

.play moretypes/nil-slices.go

* Thêm phần tử vào một slice

Việc thêm các phần tử mới vào một slice được sử dụng nhiều, do đó Go cung cấp 
một hàm `append` để làm việc này. The [[http://golang.org/pkg/builtin/#append][documentation]]
of the built-in package describes `append`.

	func append(s []T, vs ...T) []T

Tham số đầu tiên `s` của hàm `append` là một slice kiểu `T`, và phần còn lại 
là các giá trị kiểu `T` được chèn thêm vào slice này.

Giá trị trả về của hàm `append` là một slice chứa tất cả các phần tử của slice
ban đầu cùng với các phần tử mới được thêm vào.

Nếu mảng bên dưới mà slice `s` trỏ đến quá nhỏ để có thể chứa được cả những giá trị mới thêm vào, 
thì khi Go sẽ tạo một mảng mới lớn hơn để có thể chứa đủ các giá trị này, và slice trả về sẽ được trỏ đến mảng mới này.

(Để tìm hiểu thêm về slice, bạn có thể xem thêm bài viết [[http://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].)

.play moretypes/append.go

* Range

Từ khoá `range` dùng trong vòng lặp `for` để lặp qua các phần tử trong một slice hoặc một map.

.play moretypes/range.go

* Range (tiếp)

Bạn có thể bỏ qua chỉ số hoặc giá trị bằng cách gán nó cho `_`.

Nếu bạn chỉ muốn chỉ số, có thể bỏ hẳn đoạn lệnh ", value".

.play moretypes/range-continued.go

* Bài tập: Slices

Cài đặt hàm `Pic`. Nó phải trả lại một slice có độ dài `dy`, mỗi phần tử có độ dài `dx` là các 8-bit số nguyên không dấu. Khi bạn chạy chương trình, nó sẽ hiển thị hình ảnh của bạn, và biểu diễn các số nguyên như là các sắc xám (chính xác hơn là các sắc xanh - bluescale).

Việc chọn hình ảnh là tùy thuộc vào bạn. Một số hàm thú vị có thể kể đến là `(x+y)/2`, `x*y`, and `x^y`.

(Bạn cần phải sử dụng vòng lặp để khởi tạo mỗi một slice `[]uint8`  bên trong [][]uint8.) `[][]uint8`.)

(Sử dụng `uint8(intValue)` để chuyển đổi giữa các kiểu.)

.play moretypes/exercise-slices.go

* Maps

Một map là một ánh xạ các khoá (key) vào các giá trị (value).

Map trước khi sử dụng phải được tạo với `make` (không dùng `new`); `nil` map là một map rỗng và không được gán giá trị cho nó.

.play moretypes/maps.go

* Khai báo một map

Việc khai báo một map giống như việc khai báo một cấu trúc, nhưng các khoá (key) trong một map là bắt buộc phải được khai báo.

.play moretypes/map-literals.go

* Khai báo một map (tiếp)

Nếu kiểu của giá trị ở mức top của map là một kiểu có tên, thì bạn có thể bỏ tên này trong khai báo từng phần tử của map.

.play moretypes/map-literals-continued.go

* Thay đổi giá trị của map

Chèn thêm hoặc cập nhật một phần tử vào map `m`:

	m[key] = elem

Lấy một phần tử:

	elem = m[key]

Xóa một phần tử:

	delete(m, key)

Kiểm tra một key có sẵn hay không với một phép gán hai giá trị:

	elem, ok = m[key]

Nếu `key` có trong `m`, thì `ok` sẽ là `true`. Nếu không, `ok` sẽ là `false` và  `elem` là giá trị zero của kiểu giá trị của phần tử của map.

Tương tự như vậy, khi đọc từ một map, nếu key không có trong map đó, thì một giá trị zero của kiểu của phần tử sẽ được trả về.

_Chú_ý_: nếu `elem` hoặc `ok` chưa được khai báo trước, bạn có thể sử dụng dạng khai báo ngắn:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Bài tập: Maps

Cài đặt hàm `WordCount`.  Nó phải trả về một map đếm các `word` bên trong một chuỗi kí tự `s`. Hàm `wc.Test` sẽ chạy một bộ test đối với chức năng trên và in ra là thành công hay thất bại.

Bạn có thể tìm thấy những thứ hữu ích trong [[http://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Giá trị hàm

Các hàm cũng là các giá trị.

.play moretypes/function-values.go

* Bao đóng hàm

Hàm trong Go có thể là các bao đóng (closure). Một bao đóng là một giá trị hàm có thể tham chiếu đến các biến bên ngoài thân của nó. Một hàm có thể truy cập và gán cho các biến mà nó tham chiếu đến, theo nghĩa này, hàm được coi là "ràng buộc" với các biến này.

Ví dụ, hàm `adder` trả về một bao đóng. Mỗi một bao đóng sẽ được ràng buộc với biến `sum` của riêng nó.

.play moretypes/function-closures.go

* Bài tập: Fibonacci closure

Let's have some fun with functions.

Bạn hãy cài đặt một hàm `fibonacci` trả về một hàm (một bao đóng) mà bản thân hàm đó trả về một số fibonacci tiếp theo.

.play moretypes/exercise-fibonacci-closure.go

* Chúc mừng!

Xin chúc mừng! Bạn đã hoàn thành bài học này!

Bạn có thể quay lại danh sách các [[/list][bài học]] để tìm những gì sẽ học tiếp theo,
hoặc tiếp tục với [[javascript:click('.next-page')][bài học kế tiếp]].
