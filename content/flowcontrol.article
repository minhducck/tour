Các câu lệnh điều khiển: for, if, else, switch và defer
Học cách làm thế nào để điều khiển dòng code của bạn với các điều kiện, vòng lặp, câu lệnh switch và câu lệnh defer.

The Go Authors
http://golang.org

* For

Go chỉ có duy nhất một kiểu vòng lặp, là vòng lặp `for`.

Một vòng lặp `for` trong Go trông giống như trong C hay Java, ngoại trừ việc không các kí tự `(`)` 
bao quanh các câu lệnh điều kiện của vòng lặp, nhưng các kí tự `{`}` là bắt buộc phải có.

.play flowcontrol/for.go

* For (tiếp)

Cũng như trong C hay Java, bạn có thể không cần các điều kiện trước và sau trong vòng lặp `for`.

.play flowcontrol/for-continued.go

* For là "while" trong Go

Bạn cũng có thể bỏ đi các dấu chấm phẩy, khi đó vòng lặp `for` trong Go cũng chính là vòng lặp `white` trong C.

.play flowcontrol/for-is-gos-while.go

* Lặp vô hạn

Nếu bạn bỏ câu lệnh điều kiện bên trong vòng lặp for, nó sẽ lặp mãi mãi, vì vậy một vòng lặp vô hạn có thể viết 
gọn lại như trong ví dụ mẫu.

.play flowcontrol/forever.go

* If

Câu lệnh `if` trông giống như trong C hay Java, ngoại trừ việc bỏ đi các dấu `(`)`, trong khi các dấu `{`}` là 
bắt buộc phải có.

(Sound familiar?)

.play flowcontrol/if.go

* If với một câu lệnh ngắn

Cũng như `for`, câu lênh `if` cũng có thể bắt đầu với một câu lệnh ngắn trước khi điều kiện 
trong câu lệnh được kiểm tra.

Các biến khai báo trong câu lệnh `if` có phạm vi sử dụng đến lệnh kết thúc trong câu lệnh `if`.

(Bạn hãy thử sử dụng biến `v` trong câu lệnh `return` cuối cùng.)

.play flowcontrol/if-with-a-short-statement.go

* If  else

Các biến khai báo trong câu lệnh `if` cũng có thể được sử dụng trong khối lệnh `else`.

.play flowcontrol/if-and-else.go

* Bài tập: Vòng lặp và hàm

Một cách đơn giản để thử nghiệm với các hàm và các vòng lặp, 
bạn hãy thử cài đặt lại hàm lấy căn bậc hai bằng cách sử dụng phương pháp Newton.

Phương pháp Newton dùng để xấp xỉ hàm `Sqrt(x)` bằng cách bắt đầu với một giá trị _z_ bất kì
và sau đó lặp lại:

.image /content/img/newton.png

Để bắt đầu, bạn thử lặp lại tính toán 10 lần và xem các giá trị bạn nhận được 
gần với kết quả như thế nào cho các đầu vào khác nhau (1, 2, 3, ...).

Tiếp theo, bạn thử thay đổi các điều kiện dừng của vòng lặp cho đến khi 
các giá trị ngừng thay đổi (hoặc chỉ thay đổi một lượng rất nhỏ). 
Quan sát xem bạn cần nhiều hơn hay ít vòng lặp hơn. Giá trị bạn thu được gần với giá trị của hàm
 [[http://golang.org/pkg/math/#Sqrt][math.Sqrt]] như thế nào?

Gợi ý: Để khai báo và khởi tạo một giá trị dấu phẩy động, bạn hãy khai báo dùng cú pháp dấu phẩy động hoặc dùng chuyển đổi kiểu:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Bạn có thể đã biết một câu lệnh `switch` trông như thế nào.

Thân của một câu lệnh `case` sẽ tự động `break`, trừ khi nó kết thúc với một câu lệnh `fallthrough`.

.play flowcontrol/switch.go

* Thứ tự ước lượng lệnh switch

Khi chạy, các điều kiện bên trong câu lệnh `switch` sẽ được ước lượng từ trên xuống dưới, 
và dừng lại khi lựa chọn đầu tiên thành công

(Ví dụ,

	switch i {
	case 0:
	case f():
	}

sẽ không gọi hàm `f` if `i==0`.)

#appengine: *Note:* Thời gian trong Playground luôn bắt đầu tại
#appengine: 2009-11-10 23:00:00 UTC, ý nghĩa của giá trị này là 
#appengine: một bài tập dành cho bạn đọc.

.play flowcontrol/switch-evaluation-order.go

* Switch không có điều kiện

Câu lệnh `switch` mà không kèm theo một điều kiện nào cũng giống như `switch`true`.

Việc viết dưới dạng này làm đơn giản hơn việc viết một chuỗi dài if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Một câu lệnh được trì hoãn (`defer`) sẽ không được chạy cho đến khi giá trị của hàm chứa nó được trả về.

Các tham số bên trong lệnh `defer` sẽ được tính toán ngay lập tức, nhưng bản thân lời gọi hàm
bên trong lệnh `defer` sẽ không được chạy, cho đến khi hàm chứa nó được trả về giá trị.

.play flowcontrol/defer.go

* Stacking defers

Các lệnh gọi hàm `defer` sẽ được đẩy vào trong một stack. Khi một hàm được trả về, các lệch gọi
`defer` bên trong hàm đó sẽ được chạy theo thứ tự vào sau ra trước (last-in-first-out).

Để tìm hiểu thêm về câu lệnh defer, bạn có thể đọc thêm bài viết
[[http://blog.golang.org/defer-panic-and-recover][này]].

.play flowcontrol/defer-multi.go

* Chúc mừng!

Xin chúc mừng! Bạn đã hoàn thành bài học này!

Bạn có thể quay lại danh sách các [[/list][bài học]] để tìm những gì sẽ học tiếp theo,
hoặc tiếp tục với [[javascript:click('.next-page')][bài học kế tiếp]].
