Lập trình đồng thời
Go cung cấp các công cụ để lập trình đồng thời như là một phần lõi của ngôn ngữ. Bài học này sẽ giới thiệu các công cụ này và các ví dụ về cách sử dụng chúng.

The Go Authors
http://golang.org

* Goroutines

Một _goroutine_ là một luồng "hạng nhẹ" (lightweight thread) được quản lý bởi trình chạy của Go.

	go f(x, y, z)

sẽ bắt đầu một goroutine mới và chạy hàm

	f(x, y, z)

Để chạy được hàm `f`, các giá trị `x`, `y` và `z` sẽ được tính toán ở goroutine hiện tại, và việc tính toán giá trị của hàm `f` sẽ được thực hiện ở goroutine mới.

Goroutine được chạy ở cùng một không gian địa chỉ trong bộ nhớ, vì vậy việc truy cập bộ nhớ chia sẻ (shared memory) phải được đồng bộ. Gói [[http://golang.org/pkg/sync/][`sync`]] cung cấp các hàm cơ bản hữu ích, mặc dù bạn không cần sử dụng nó nhiều như các hàm cơ bản khác. (Xem slide tiếp theo.)

.play concurrency/goroutines.go

* Kênh

Một kênh (channel) là một đường dẫn thông qua đó bạn có thể gửi và nhận các giá trị, thông qua toán tử `<-` của kênh.

	ch <- v    // Gửi giá trị v đến kênh ch.
	v := <-ch  // Nhận giá trị từ ch, và
	           // gán giá trị đó cho v.

(Các luồng dữ liệu theo hướng mũi tên.)

Cũng như map và slice, kênh phải được khởi tạo trước khi sử dụng:

	ch := make(chan int)

Mặc định, việc gửi và nhận các khối sẽ bị chặn lại cho đến khi phía bên kia đã sẵn sàng. Điều này cho phép các goroutine được đồng bộ hoá mà không cần phải sử dụng các khoá tường minh hoặc các biến điều kiện.

.play concurrency/channels.go

* Kênh đệm

Các kênh có thể sử dụng các _bộ_đệm_. Cung cấp một tham số thứ hai là chiều dài của bộ đệm cho hàm `make`, sẽ khởi tạo một kênh được đệm:

	ch := make(chan int, 100)

Việc gửi dữ liệu đến một kênh được đệm sẽ chỉ bị chặn lại khi bộ đệm đầy. Việc nhận dữ liệu sẽ bị chặn lại khi bộ đệm là rỗng.

Bạn hãy thử thay đổi ví dụ này để làm đầy bộ đệm và xem điều gì sẽ xảy ra.

.play concurrency/buffered-channels.go

* Range và Close

Một bộ gửi có thể `đóng` (`close`) một kênh để cho biết là không có giá trị nào sẽ được gửi nữa. Các bộ nhận sẽ kiểm tra xem một kênh đã được đóng lại hay chưa bằng cách gán thêm một tham số thứ hai trong biểu thức nhận. Sau khi gán:

	v, ok := <-ch

`ok` sẽ là `false` nếu không có giá trị nào nữa để tiếp nhận, và kênh đã được đóng lại.

Vòng lặp `for`i`:=`range`c` sẽ nhận giá trị từ kênh một cách liên tục cho đến khi kênh này được đóng lại.

*Chú*ý:* Chỉ có bộ gửi mới nên đóng một kênh, không bao giờ đóng tại bộ nhận. Việc gửi dữ liệu trên một kênh đã được đóng sẽ gây ra một panic.

*Chú*ý*khác*: Các kênh giống như file, bạn thường không cần phải đóng chúng. Việc đóng chỉ cần thiết khi bộ nhận phải được thông báo là sẽ không có giá trị tới nữa, chẳng hạn như để chấm dứt một vòng lặp `range`.

.play concurrency/range-and-close.go

* Câu lệnh chọn

Một câu lệnh `select` cho phép một `goroutine` lắng nghe trên nhiều kênh.

Câu lệnh select sẽ bị block lại cho đến khi một trong các lựa chọn bên trong nó có thể chạy. Trong trường hợp nhiều lựa chọn có thể chạy, nó sẽ chạy ngẫu nhiên một trong số các lựa chọn này.

.play concurrency/select.go

* Câu lệnh chọn mặc định

Lựa chon `default` trong một câu lệnh `select` sẽ chạy nếu không có lựa chọn nào khác trong câu lệnh `select` sẵn sàng.

Bạn hãy thử sử dụng `default` để gửi hoặc nhận giá trị mà không bị chặn:

	select {
	case i := <-c:
		// sử dụng i
	default:
		// nhận giá trị từ c mà không bị chặn
	}

.play concurrency/default-selection.go

* Bài tập: Cây nhị phân tương đương

Có thể có nhiều cây nhị phân khác nhau với cùng một chuỗi các giá trị được lưu trữ tại các lá. Ví dụ, đây là hai cây nhị phân cùng lưu trữ một chuỗi 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Một hàm để kiểm tra xem hai cây nhị phân có cùng lưu trữ một chuỗi hay không là khá phức tạp ở hầu hết các ngôn ngữ. Chúng ta sẽ sử dụng lập trình đồng thời trong Go và các kênh để viết một giải pháp đơn giản.

Ví dụ này sử dụng gói `tree`, trong đó định nghĩa một kiểu:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Continue description on [[javascript:click('.next-page')][next page]].

* Bài tập: Cây nhị phân tương đương (tiếp)

*1.* Cài đặt hàm `Walk`.

*2.* Kiểm tra hàm `Walk` chạy đúng đắn.

Hàm `tree.New(k)` tạo một cây nhị phân mới một cách ngẫu nhiên để lưu các giá trị  `k`, `2k`, `3k`, ..., `10k`.

Tạo một kênh mới `ch` và gọi hàm `walker`:

	go Walk(tree.New(1), ch)

Sau đó đọc và in ra 10 giá trị từ kênh này. Nó phải là các số 1, 2, 3, ..., 10.

*3.* Cài đặt hàm `Same` sử dụng hàm `Walk` để xác định xem `t1` và `t2` có lưu trữ cùng giá trị hay không.

*4.* Kiểm tra hàm `Same` có hoạt động đúng đắn hay không.

`Same(tree.New(1),`tree.New(1))` phải trả về true, và `Same(tree.New(1),`tree.New(2))` phải trả về false.

.play concurrency/exercise-equivalent-binary-trees.go

* Bài tập: Web Crawler

Trong bài tập này bạn sẽ sử dụng lập trình đồng thời trong Go để chạy đồng thời một web crawler.

Thay đổi hàm `Crawl` để lấy các URLs một cách đồng thời mà không lấy dữ liệu từ một URL hai lần.

.play concurrency/exercise-web-crawler.go

* Where to Go from here...

#appengine: Bạn có thể bắt đầu bằng việc
#appengine: [[http://golang.org/doc/install/][cài đặt Go]] hoặc tải về
#appengine: [[http://code.google.com/appengine/downloads.html#Google_App_Engine_SDK_for_Go][Go App Engine SDK]].

#appengine: Khi bạn đã cài đặt xong Go, 
The
[[http://golang.org/doc/][Go Documentation]] là nơi rất tốt để bạn 
#appengine: tiếp tục.
bắt đầu.
Nó chứa các tài liệu tham khảo, các hướng dẫn, video và nhiều thứ khác.

Để tìm hiểu cách tổ chức và làm việc với Go code, xem thêm [[http://www.youtube.com/watch?v=XCsL89YtqCs][screencast]] này hoặc đọc thêm bài viết [[http://golang.org/doc/code.html][How to Write Go Code]].

Nếu bạn cần xem thêm với các thư viện chuẩn, xem thêm [[http://golang.org/pkg/][package reference]]. Nếu bạn cần hiểu thêm về chính ngôn ngữ Go, bạn sẽ ngạc nhiên là [[http://golang.org/ref/spec][Bản Đặc tả Ngôn ngữ Go]] dễ đọc thế nào.

Để tìm hiểu thêm về lập trình đồng thời trong Go, xem
[[http://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[http://talks.golang.org/2012/concurrency.slide][slides]])
và 
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[http://talks.golang.org/2013/advconc.slide][slides]])
và đọc thêm
[[http://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]]
codewalk.

Để bắt đầu việc viết các ứng dụng web, xem thêm
[[http://vimeo.com/53221558][A simple programming environment]]
([[http://talks.golang.org/2012/simple.slide][slides]])
và đọc hướng dẫn [[http://golang.org/doc/articles/wiki/][Writing Web Applications]].

Bạn có thể xem [[http://golang.org/doc/codewalk/functions/][First Class Functions in Go]] codewalk để thấy một khía cạnh thú vị của kiểu giá trị hàm (function value) trong Go.

[[http://blog.golang.org/][Go Blog]] chứa một số lượng lớn các bài viết hữu ích về Go.

Bạn cũng có thể truy cập [[http://golang.org][golang.org]] để tìm hiểu thêm.

