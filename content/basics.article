Các gói, biến và hàm.
Học về các thành phần cơ bản của một chương trình Go.

The Go Authors
http://golang.org

* Gói

Mọi chương trình Go đều được tạo thành bởi các gói (package).

Một chương trình sẽ được bắt đầu chạy với gói `main`.

Chương trình ở bên trái sử dụng các gói `"fmt"` và `"math/rand"`.

Theo quy ước, tên gói được quy định trùng với thành phần cuối cùng của đường dẫn của gói.
Ví dụ, bên trong gói `"math/rand"`, các file sẽ được bắt đầu với khai báo `package`rand`.

#appengine: *Note:* trong môi trường Playground, các chương trình chạy một cách
#appengine: xác định, vì vậy `rand.Intn` sẽ luôn trả về cùng một số.
#appengine:
#appengine:
#appengine: (Để xem một số khác, bạn có thể sử dụng bộ sinh số ngẫu nhiên, 
#appengine: xem thêm ở [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].)

.play basics/packages.go

* Imports

Đoạn code ví dụ gộp nhiều lệnh import vào một cặp dấu ngoặc đơn. 

Bạn cũng có thể viết nhiều lệnh import rời nhau:

	import "fmt"
	import "math"

Tuy nhiên, bạn nên dùng cách viết gộp nhiều lệnh import.

.play basics/imports.go

* Các tên được export

Sau khi import một gói, bạn có thể sử dụng các tên (biến, hàm, cấu trúc,...) mà gói đó export ra.

Trong Go, tên biến, hàm, cấu trúc,... sẽ được export nếu nó bắt đầu bằng một chữ cái viết hoa.

Ví dụ `Foo` sẽ được export, `FOO` cũng vậy. Nhưng `foo` sẽ không được export.

Bạn hãy thử chạy chương trình. Sau đó thử đổi tên `math.pi` thành `math.Pi` và chạy lại một lần nữa.

.play basics/exported-names.go

* Hàm

Một hàm có thể nhận một vài tham số hoặc không có tham số nào.

Trong ví dụ này, hàm `add` nhận hai tham số kiểu `int`.

Chú ý là kiểu của tham số được đặt _sau_ tên của tham số.

(Để biết lý do tại sao Go lại thiết kế như vậy, bạn có thể xem thêm bài viết về 
[[http://blog.golang.org/gos-declaration-syntax][cú pháp khai báo trong Go]].)

.play basics/functions.go

* Hàm (tiếp)

Khi hai hoặc nhiều tham số liên tiếp nhau có cùng một kiểu, bạn có thể bỏ qua kiểu của chúng, 
ngoại trừ tham số cuối cùng.

Trong ví dụ này, chúng ta có thể rút ngắn

	x int, y int

thành

	x, y int

.play basics/functions-continued.go

* Trả về nhiều kết quả

Một hàm có thể trả về nhiều kết quả.

Trong ví dụ này, hàm `swap` trả về hai chuỗi.

.play basics/multiple-results.go

* Đặt tên giá trị trả về

Các giá trị trả về của một hàm có thể được đặt tên và được sử dụng như là các biến.

Tên của các giá  trả về nên được sử dụng để làm rõ nghĩa cho giá trị trả về đó.

Một câu lệnh `return` không có tham số sẽ trả về giá trị hiện tại của kết quả. 

Câu lệnh `return` không có tham số chỉ nên được sử dụng ở những hàm ngắn, như là ví dụ ở đây. 
Câu lệnh này sẽ làm chương trình trở nên khó đọc hơn ở những hàm dài.

.play basics/named-results.go

* Biến

Câu lênh `var` được dùng để khai báo biến; và cũng giống như khai báo danh sách tham số của hàm, 
kiểu của biến được viết sau tên của biến. 

Một câu lệnh `var` có thể đặt ở bên trong một gói hoặc bên trong một hàm. 
Ví dụ bên cạnh minh hoạ cả hai cách sử dụng đó.

.play basics/variables.go

* Biến với giá trị khởi tạo

Một khai báo `var` có thể đồng thời kèm theo giá trị khởi tạo cho từng biến.

Nếu một giá trị khởi tạo được cho trước, thì có thể không cần phải khai báo kiểu, 
kiểu của biến sẽ là kiểu của giá trị này.

.play basics/variables-with-initializers.go

* Khai báo ngắn cho biến

Bên trong một hàm, có thể dùng câu lệnh gán ngắn `:=` để khai báo cho biến với kiểu ngầm định.

Bên ngoài một hàm, mọi câu lệnh đều phải bắt đầu với một từ khoá (`var`, `func`, ...), 
do đó sẽ không dùng được khai báo ngắn `:=`.

.play basics/short-variable-declarations.go

* Các kiểu cơ bản

Các kiểu cơ bản của Go

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // cách gọi khác c uint8

	rune // cách gọi khác của int32
	     // biểu diễn một kí tự Unicode

	float32 float64

	complex64 complex128

Các lệnh khai báo biến cũng có thể được nhóm lại theo khối, giống như trong khai báo `import`.

Các kiểu `int`, `uint` và `uintptr` sẽ là kiểu số nguyên 32-bit trên các hệ thống 32-bit 
và là kiểu 64-bit trên các hệ thống 64-bit. Khi cần sử dụng kiểu số nguyên, bạn nên sử dụng `int`, 
trừ khi bạn có lý do đặc biệt cần sử dụng kiểu số nguyên không dấu.

.play basics/basic-types.go

* Các giá trị zero

Các biến khi khai báo mà không có giá trị khởi đầu thì sẽ được gán với _giá_trị_zero_ 
tuỳ theo kiểu của biến.


Các giá trị zero:

- `0` cho kiểu số,
- `false` cho kiểu boolean, vaf
- `""` (chuỗi rỗng) cho kiểu chuỗi (string).

.play basics/zero.go

* Chuyển đổi kiểu

Biểu thức `T(v)` sẽ chuyển đổi giá trị `v` sang một giá trị kiểu `T`.

Một số chuyển đổi số:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Hoặc đơn giản hơn:

	i := 42
	f := float64(i)
	u := uint(f)

Không giống như trong C, trong Go, phép gán giữa các biến khác kiểu nhau yêu cầu một phép chuyển đổi 
kiểu tường minh.

Bạn hãy thử bỏ việc chuyển đổi kiểu sang `float64` hay `int` trong ví dụ mẫu và xem kết quả. 

.play basics/type-conversions.go

* Suy diễn kiểu 

Khi khai báo một biến mà không chỉ rõ kiểu của nó (sử dụng từ khoá `var` và không khai báo kiểu, 
hoặc sử dụng `:=`), kiểu của biến sẽ được _suy_diễn_ từ giá trị phía bên phải của phép gán.

Khi phía bên phải của khai báo có kiểu, thì biến mới sẽ có cùng một kiểu:

	var i int
	j := i // j sẽ là kiểu int

Nhưng khi bên phải của phép gán là một hằng số không định kiểu, thì biến mới có thể là `int`,
`float64` hoặc `complex128` tuỳ thuộc vào độ chính xác (precision) của hằng số đó:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Bạn hãy thử thay đổi giá trị khởi tạo của `v` trong ví dụ mẫu và xem kiểu của nó bị thay đổi 
như thế nào.

.play basics/type-inference.go

* Hằng 

Hằng (constant) được khai báo như biến, nhưng với từ khoá `const`.

Hằng có thể là kí tự, chuỗi, boolean, hoặc một giá trị số.

Hằng không thể được định nghĩa bằng cú pháp `:=`.

.play basics/constants.go

* Hằng số 

Hằng số (numeric constants) là các giá trị có độ chính xác cao (high-precision).

Hằng số không được định kiểu, và kiểu của nó sẽ được xác định tuỳ thuộc vào hoàn cảnh sử dụng nó.

Bạn hãy thử in kết quả của `needInt(Big)`.

.play basics/numeric-constants.go

* Chúc mừng!

Bạn đã hoàn thành bài học này!

Bạn có thể quay lại danh sách các [[/list][bài học]] để tìm những gì sẽ học tiếp theo,
hoặc tiếp tục với [[javascript:click('.next-page')][bài học kế tiếp]].