Phương thức và giao diện
Học về phương thức và giao diện, cách định nghĩa các đối tượng và hành vi của nó.

The Go Authors
http://golang.org

* Phương thức

Go không có lớp (class). Tuy nhiên, bạn có thể định nghĩa phương thức (method) trên kiểu dữ liệu cấu trúc.

_Bộ_nhận_ của phương thức (_method_receiver_) sẽ được đặt giữa từ khoá `func` và tên của phương thức đó.

.play methods/methods.go

* Phương thức (tiếp)

Bạn có thể khai báo một phương thức trên _mọi_ kiểu trong gói của bạn, không chỉ trên kiểu cấu trúc.

Tuy nhiên, bạn không thể khai báo một phương thức trên một kiểu của một gói khác (bao gồm cả các kiểu built-in).

.play methods/methods-continued.go

* Phương thức với bộ nhận con trỏ

Các phương thức có thể liên kết với một kiểu có tên hoặc một con trỏ đến một kiểu có tên.

Ở đây chúng ta thấy có hai phương thức `Abs`. Một phương thức trên kiểu con trỏ `*Vertex` và một phương thức khác trên kiểu giá trị `MyFloat`.

Có hai lý do để sử dụng một bộ nhận con trỏ. Trước tiên, để tránh việc sao chép giá trị trên mỗi lời gọi phương thức (sẽ hiệu quả hơn nếu kiểu giá trị là một cấu trúc lớn). Thứ hai, sử dụng bộ tiếp nhận con trỏ thì phương thức có thể thay đổi giá trị của cấu trúc mà con trỏ này trỏ đến.

Bạn hãy thử thay đổi khai báo của phương thức `Abs` và `Scale` và sử dụng `Vertex` như là bộ thu nhận, thay vì `*Vertex`.

Phương thức `Scale` không có tác dụng khi `v` là kiểu `Vertex`. `Scale` thay đổi `v`. Khi `v` là một kiểu giá trị (không phải là con trỏ), phương thức này chỉ thấy một bản sao của `Vertex`, và do đó không thể thay đổi giá trị gốc.

`Abs` hoạt động theo cách khác. Nó chỉ đọc giá trị của `v`. Do đó không quan trọng việc nó đọc giá trị gốc (thông qua con trỏ) hay là đọc bản sao của giá trị này.

.play methods/methods-with-pointer-receivers.go

* Giao diện

Một giao diện (interface) được xác định bởi một tập hợp các phương thức.

Một giá trị của một kiểu giao diện có thể chứa bất kì giá trị nào mà cài đặt các phương thức đó.

*Chú*ý:* Có lỗi ở dòng 22 ở đoạn code mẫu.

`Vertex` (kiểu giá trị) không đáp ứng giao diện `Abser` vì phương thức `Abs` chỉ được định nghĩa cho con trỏ `*Vertex` (kiểu con trỏ).

.play methods/interfaces.go

* Giao diện được cài đặt ngầm định

Một kiểu sẽ cài đặt cho một giao diện bằng cách cài đặt tất cả các phương thức của giao diện đó.

Bạn không cần phải khai báo tường minh là kiểu nào cài đặt giao diện nào, không cần phải có từ khoá "implements".

Việc cài đặt ngầm các giao diện tách việc phụ thuộc giữa các gói cài đặt giao diện khỏi các gói chứa định nghĩa giao diện: không có sự phụ thuộc lẫn nhau nào giữa các gói đó.

Nó cũng khuyến khích việc định nghĩa các giao diện chính xác, vì bạn không cần phải tìm tất cả các cài đặt và gán nhãn cho nó với tên của giao diện mới.

Ví dụ, gói [[http://golang.org/pkg/io/][io]] định nghĩa các giao diện `Reader` và `Writer`; do đó bạn không cần phải định nghĩa lại.

.play methods/interfaces-are-satisfied-implicitly.go

* Stringers

Một trong những giao diện phổ biến nhất là [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] được định nghĩa bởi gói [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Một `Stringer` là một kiểu mà có thể tự mô tả chính nó như là một chuỗi (string). Gói `fmt` (và rất nhiều gói khác) sẽ tìm giao diện này và dùng nó để in giá trị ra.

.play methods/stringer.go

* Bài tập: Stringers

Bạn hãy cài đặt giao diện `fmt.Stringer` cho kiểu `IPAddr` để nó có thể in địa chỉ ra dưới dạng bộ 4 số ngăn cách bởi dấu chấm.

Ví dụ, `IPAddr{1,`2,`3,`4}` sẽ in ra `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errors

Go quản lý lỗi với kiểu giá trị `error`.

Kiểu `error` là một giao diện có sẵn của Go, tương tự như `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Giống như với `fmt.Stringer`, gói `fmt` sẽ tìm kiếm giao diện `error` khi cần in kết quả ra.)

Các hàm thường trả về một giá trị lỗi, và đoạn code gọi nó sẽ xử lý lỗi này bằng các kiểm tra xem lỗi này có là `nil` hay không.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
	}
	fmt.Println("Converted integer:", i)

Khi `error` là `nil` có nghĩa là không có lỗi, còn khi `error` khác `nil` có nghĩa là có lỗi xảy ra.

.play methods/errors.go

* Bài tập: Errors

Copy hàm `Sqrt` của bạn từ [[/flowcontrol/8][bài tập trước]] và sửa nó để có thể trả về một giá trị `error`. 

Hàm `Sqrt` nên trả về một giá trị khác `nil` khi đầu vào là một số âm, vì nó không hỗ trợ số phức.

Bạn hãy tạo một kiểu mới

	type ErrNegativeSqrt float64

và làm cho nó thành kiểu `error` bằng cách định nghĩa cho nó một phương thức

	func (e ErrNegativeSqrt) Error() string

sao cho `ErrNegativeSqrt(-2).Error()` trả về `"cannot`Sqrt`negative`number:`-2"`.

*Chú*ý:* Lời gọi đến `fmt.Sprint(e)` bên trong phương thức `Error` sẽ khiến chương trình rơi vào một vòng lặp vô hạn. Bạn có thể tránh được điều này bằng cách chuyển đổi kiểu của `e` trước: `fmt.Sprint(float64(e))`. Tại sao lại như vậy?

Hãy thay đổi hàm `Sqrt` của bạn để có thể trả về một giá trị `ErrNegativeSqrt` khi đầu vào là một số âm.

.play methods/exercise-errors.go

* Readers

Gói `io` định nghĩa một giao diện `io.Reader` dùng để đọc một dòng dữ liệu đầu vào.

Thư viện chuẩn của Go chứa [[http://golang.org/search?q=Read#Global][rất nhiều cài đặt khác nhau]] của giao diện này, dùng để đọc một dòng dữ liệu từ file, từ kết nối mạng, từ các tập tin nén, từ dữ liệu được mã hoá, và rất nhiều nguồn khác.

Giao diện `io.Reader` có một phương thức `Read`:

	func (T) Read(b []byte) (n int, err error)

Hàm `Read` sẽ đọc một mảng byte vào slice `b` và trả về số byte đã đọc được và một giá trị `error` (nếu có). Nó sẽ trả về một giá trị error `io.EOF` nếu hết dòng dữ liệu.

Ví dụ mẫu tạo một kiểu [[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
và đọc mỗi một lần 8 byte một.

.play methods/reader.go

* Bài tập: Readers

Bạn hãy thử cài đặt một kiểu `Reader` mà nó đọc ra một dòng vô hạn các kí tự ASCII `'A'`.

.play methods/exercise-reader.go

* Bài tập: rot13Reader

Một mẫu thường dùng là một kiểu [[http://golang.org/pkg/io/#Reader][io.Reader]] gói một `io.Reader` vào bên trong nó, và sửa luồng dữ liệu mà nó đọc vào theo một cách nào đó.

Ví dụ, hàm [[http://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] nhận một kiểu `io.Reader` (một luồng dữ liệu đã được nén) và trả về một kiểu `*gzip.Reader` (một luồng dữ liệu đã được giải nén).

Bạn hãy cài đặt giao diện `io.Reader` cho kiểu `rot13Reader`, đọc dữ liệu từ một `io.Reader` khác, thay đổi dòng dữ liệu bằng cách áp dụng mật mã thay thế [[http://en.wikipedia.org/wiki/ROT13][rot13]] trên tất cả các kí tự alphabet.

Kiểu dữ liệu `rot13Reader` đã được viết sẵn cho bạn.
Bạn hãy biến nó thành một `io.Reader` bằng cách cài đặt phương thức `Read` cho nó.

.play methods/exercise-rot-reader.go

* Web server

Gói [[http://golang.org/pkg/net/http/][http]] đáp ứng các truy vấn HTTP bằng cách sử dụng bất kì kiểu nào cài đặt giao diện `http.Handler`:

	package http

	type Handler interface {
		ServeHTTP(w ResponseWriter, r *Request)
	}

Trong ví dụ này, kiểu `Hello` cài đặt giao diện `http.Handler`.

Bạn hãy thử truy cập [[http://localhost:4000/][http://localhost:4000/]] để xem lời chào.

#appengine: *Chú*ý:* Ví dụ web server này sẽ không chạy được ở đây.
#appengine: Để có thể chạy được, bạn có thể
#appengine: [[http://golang.org/doc/install/][cài đặt Go]] trên máy của bạn.

.play methods/web-servers.go

* Bài tập: HTTP Handlers

Cài đặt các kiểu sau và định nghĩa phương thức `ServeHTTP` trên chúng. Đăng kí chúng để có thể xử lý được các đường dẫn cụ thể trên web server của bạn.

	type String string

	type Struct struct {
		Greeting string
		Punct    string
		Who      string
	}

Ví dụ, bạn có thể đăng kí để xử lý truy vấn đến các đường dẫn:

	http.Handle("/string", String("I'm a frayed knot."))
	http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})

#appengine: *Chú*ý:* Ví dụ web server này sẽ không chạy được ở đây.
#appengine: Để có thể chạy được, bạn có thể
#appengine: [[http://golang.org/doc/install/][cài đặt Go]] trên máy của bạn.

.play methods/exercise-http-handlers.go

* Images

Gói [[http://golang.org/pkg/image/#Image][image]] định nghĩa một giao diện `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Chú*ý* Phương thức `Bounds` trả về một kiểu giá trị `Retangle`, thực chất là một kiểu giá trị [[http://golang.org/pkg/image/#Rectangle][`image.Rectangle`]] được định nghĩa bên trong gói `image`.

(Xem thêm [[http://golang.org/pkg/image/#Image][pkg/image]] để biết thêm chi tiết.)

Các kiểu `color.Color` và `color.Model` cũng là các giao diện, nhưng chúng ta bỏ qua điều này bằng cách sử dụng các cài đặt đã có `color.RGBA` và `color.RGBAModel`. Các giao diện và các kiểu này có thể được tìm thấy trong gói [[http://golang.org/pkg/image/color/][image/color]].

.play methods/images.go

* Bài tập: Images

Bạn còn nhớ bộ sịnh hình ảnh mà bạn đã viết? Hãy viết một cái khác, nhưng lần này là cài đặt một giao diện `image.Image` thay vì việc nó là một slice.

Định nghĩa kiểu `Image` của riêng bạn, cài đặt các [[http://golang.org/pkg/image/#Image][phương thức cần thiết]] của giao diện `image.Image`, và gọi hàm `pic.ShowImage`.

Hàm `Bounds` phải trả về một `image.Rectangle`, ví dụ như `image.Rect(0,`0,`w,`h)`.

Hàm `ColorModel` trả về một `color.RGBAModel`.

Hàm `At` trả về một màu; giá trị `v` trong bộ sinh ảnh của bài tập trước sẽ tương ứng với `color.RGBA{v,`v,`255,`255}` trong bài tập này.

.play methods/exercise-images.go

* Chúc mừng!

Bạn đã hoàn thành bài học này!

Bạn có thể quay lại danh sách các [[/list][bài học]] để tìm những gì sẽ học tiếp theo,
hoặc tiếp tục với [[javascript:click('.next-page')][bài học kế tiếp]].
